<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Princeling66&#39;Blog</title>
  
  <subtitle>这不是BUG 这是feature</subtitle>
  <link href="https://princeling66.github.io/MyBlog/atom.xml" rel="self"/>
  
  <link href="https://princeling66.github.io/MyBlog/"/>
  <updated>2021-01-07T02:59:40.961Z</updated>
  <id>https://princeling66.github.io/MyBlog/</id>
  
  <author>
    <name>wangPei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Oauth2.0 实现短信验证码登录过程详解</title>
    <link href="https://princeling66.github.io/MyBlog/2021/01/07/Oauth2.0%20%E5%AE%9E%E7%8E%B0%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E7%99%BB%E5%BD%95%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3(%E5%BE%AE%E6%9C%8D%E5%8A%A1)/"/>
    <id>https://princeling66.github.io/MyBlog/2021/01/07/Oauth2.0%20%E5%AE%9E%E7%8E%B0%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E7%99%BB%E5%BD%95%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3(%E5%BE%AE%E6%9C%8D%E5%8A%A1)/</id>
    <published>2021-01-07T10:30:16.000Z</published>
    <updated>2021-01-07T02:59:40.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Oauth2-0-实现短信验证码登录过程详解"><a href="#Oauth2-0-实现短信验证码登录过程详解" class="headerlink" title="Oauth2.0 实现短信验证码登录过程详解"></a>Oauth2.0 实现短信验证码登录过程详解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>公司新分配了微服务的项目，要求在已有密码登陆的架构上增加手机验证码登陆功能，原有的密码登陆都没摸清的我懵逼了，百度看了很多Spring Security 和 OAuth2基本概念还有一些如何实现短信验证码登录功能的博客，很多文章一上来就给你展示n个类的，或者直接贴上一大堆代码的，对于才了解一点基本概念的我来说属实有点难啃，好在找到了一位大佬将思路以及实现写的很清晰的文章，鉴于大佬的文章图片挺模糊的，我把这几天弄出来的功能简单整理一下，做个记录。(不想看分析，想直接简单粗暴开始干的请直接跳到标题为编码阶段的开始看)</p><p>阅读本文需要的基础知识：</p><ul><li>熟练掌握Java</li><li>掌握了Spring Boot基础知识</li><li>默认已经整合好密码模式</li></ul><h3 id="架构搭建"><a href="#架构搭建" class="headerlink" title="架构搭建"></a>架构搭建</h3><p>本文只说验证码登录相关部分，默认大家Spring Cloud OAuth2这部分环境已经搭建好。<br><a href="https://www.cnblogs.com/fengzheng/p/11724625.html">Spring Cloud OAuth2 实现用户认证及单点登录</a></p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>OAuth 2 有四种授权模式，分别是授权码模式（authorization code）、简化模式（implicit）、密码模式（resource owner password credentials）、客户端模式（client credentials）。</p><p><a href="https://princeling66.github.io/MyBlog/2021/01/05/Spring%20Security%20%E5%92%8C%20OAuth2%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/">想了解简单的Spring Security 与 OAuth2的基本概念和应用场景的可以点这里</a></p><p>但是有时候我们需要一些自己特殊的模式登录，比如说验证码登录，第三方登录等等。上面几种模式并不是很方便，下面是将密码模式改造成手机验证码的方式来登录。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><h2 id="TokenEndpoint类中可以看到入口-oauth-token"><a href="#TokenEndpoint类中可以看到入口-oauth-token" class="headerlink" title="TokenEndpoint类中可以看到入口/oauth/token"></a>TokenEndpoint类中可以看到入口/oauth/token</h2><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106171948580.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>首先我们要知道/oauth/token是我们登录验证调用的接口，无论是get还是post都会走到post这个方法中。</p><p>其次我们需要打断点去看一下源码，了解两件事。</p><p>1、哪一步加入的四种授权模式。（因为四种授权模式是写死在源码里的，拓展的时候我们得自己加上）</p><p>2、密码模式是在哪里开始验证用户名密码。（为的是改造那部分来写自己的验证码模式）</p><h2 id="看源码阶段"><a href="#看源码阶段" class="headerlink" title="看源码阶段"></a>看源码阶段</h2><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106172230501.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OAuth2AccessToken token = getTokenGranter().grant(tokenRequest.getGrantType(), tokenRequest);</span><br></pre></td></tr></table></figure><p>这句代码就是我们要找的突破点</p><p>getTokenGranter()会调用tokenGranter()，tokenGranter的内容为：</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106172734520.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="getDefaultTokenGranters"><a href="#getDefaultTokenGranters" class="headerlink" title="getDefaultTokenGranters()"></a>getDefaultTokenGranters()</h3><p>就是这个方法，写死了那四种授权模式。红圈部分是在添加密码模式，之后我们就是要在这里添加我们的授权码模式<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106172843101.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="密码模式实现类ResourceOwnerPasswordTokenGranter"><a href="#密码模式实现类ResourceOwnerPasswordTokenGranter" class="headerlink" title="密码模式实现类ResourceOwnerPasswordTokenGranter"></a>密码模式实现类ResourceOwnerPasswordTokenGranter</h3><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106173031320.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>ResourceOwnerPasswordTokenGranter继承了AbstractTokenGranter类</p><p>而AbstractTokenGranter的实现类正好对应着四种授权模式，外加个刷新token的<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021010617325476.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>那么改造思路就很明确了</p><p>1、我们自己新增一个验证码模式类继承AbstractTokenGranter，</p><p>2、在源码调用getDefaultTokenGranters()方法的时候我们手动把这个类加进去不就行了</p><h2 id="编码阶段"><a href="#编码阶段" class="headerlink" title="编码阶段"></a>编码阶段</h2><h4 id="新建自定义验证码类SmsTokenGranter"><a href="#新建自定义验证码类SmsTokenGranter" class="headerlink" title="新建自定义验证码类SmsTokenGranter"></a>新建自定义验证码类SmsTokenGranter</h4><p>内容直接复制ResourceOwnerPasswordTokenGranter中的内容<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106173500359.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>password换成我们自定义的sms<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106173652851.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106173901371.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>重点在于checkPhoneSms(parameters);这是我们自定义的验证方法，对于验证码的验证就在这个方法中去做</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//在这个类中无法使用@autowire来从spring容器中取bean，因为不是他管理的，</span></span><br><span class="line"><span class="comment">//所以我们写了一个工具类(就是附录中的ApplicationContextAwareUtil)去取我们需要的bean</span></span><br><span class="line">   <span class="keyword">public</span> UserClientTransitService userClient = ApplicationContextAwareUtil.getBean(<span class="string">&quot;userClientTransitServiceImpl&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPhoneSms</span>(<span class="params">Map&lt;String, String&gt; parameters</span>)</span> &#123;</span><br><span class="line">       String phone = (String) parameters.<span class="keyword">get</span>(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">       String code = (String) parameters.<span class="keyword">get</span>(<span class="string">&quot;code&quot;</span>);<span class="comment">//验证码</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isBlank(phone)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InvalidGrantException(<span class="string">&quot;手机号不能为空&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isBlank(code)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InvalidGrantException(<span class="string">&quot;验证码不能为空&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        1、从缓存中根据手机号取出验证码校验不能为空</span></span><br><span class="line"><span class="comment">        2、验证通过后根据手机号查出用户名密码，设置到parameters中，这样本质就还是走密码模式</span></span><br><span class="line"><span class="comment">        （如果未创建的用户在这一步可以调用创建用户的方法，同时随机生成一个密码存着）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        特别注意：设置password时，根据自己的实际情况决定是否要使用PasswordEncoder，否则密码验证</span></span><br><span class="line"><span class="comment">        时会一直报错。不清楚PasswordEncoder是啥的同学，建议先阅读下面链接的环境搭建</span></span><br><span class="line"><span class="comment">           https://www.cnblogs.com/fengzheng/p/11724625.html</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       R&lt;UserInfo&gt; result = <span class="literal">null</span>;</span><br><span class="line">       result = userClient.userClientTransit(phone);</span><br><span class="line">       <span class="keyword">if</span> (result.isSuccess()) &#123;</span><br><span class="line">           UserInfo userInfo = result.getData();</span><br><span class="line">           User user = userInfo.getUser();</span><br><span class="line">           <span class="comment">//设置username和password，之所以设置手机号</span></span><br><span class="line">           <span class="comment">//是为了在loadUserByUsername方法中和原本走密码模式的username做一个区分</span></span><br><span class="line">           parameters.put(<span class="string">&quot;username&quot;</span>, user.getPhone());</span><br><span class="line">           parameters.put(<span class="string">&quot;password&quot;</span>, user.getPlaintextPassword());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我这里因为是微服务，user模块需要通过feign类远程调用，这边就新建了个userClientTransitServiceImpl去调用userClient,把它交给bean管理这边就能拿到了，<br>之前做接口的时候数据库存了明文密码，加上我这里使用了PasswordEncoder，所以user.getPlaintextPassword()拿的是明文密码，这块之后还是需要再优化一下。<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106175308601.jpg#pic_center" alt="PasswordEncoder"><br>PasswordEncoder.matches会把明文密码加密后和数据库中的密码对比。</p><p>loadUserByUsername方法中会根据username获取用户的权限信息组装起来，我这边因为有一个门户和一个后台的登陆，所以加了个手机登陆的类型，验证码的校验也在这里做了，也可以在上面checkPhoneSms()做<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106175624638.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>注意点：<br>原本的密码模式，是直接拿到我们输入的密码然后用passwordEncoder加密后再继续处理的，改成手机登录后我们拿到的就是一个加密的密码，所以它又会加密一次。所以在loadUserByUsername方法中，我们发现是其他模式登录时，把password也再加密一次。这样对比的密码就一致了。<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106180216691.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="在源码中加入我们自定义的验证码类"><a href="#在源码中加入我们自定义的验证码类" class="headerlink" title="在源码中加入我们自定义的验证码类"></a>在源码中加入我们自定义的验证码类</h3><p>方式有好几种，我就提供一种简单粗暴的，有想法的同学可以自己更改方式</p><p>我这里是从源码中把AuthorizationServerEndpointsConfigurer类复制出来，放在同名的包下，这样启动项目后就会优先走我们修改的代码<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106180407889.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>修改的东西很简单，把密码模式那句话复制一下，把new的类从ResourceOwnerPasswordTokenGrantercoin换成我们自定义的，SmsTokenGranter类即可,参数不用改变。<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106180525414.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="修改OAuth2-的认证中心配置文件"><a href="#修改OAuth2-的认证中心配置文件" class="headerlink" title="修改OAuth2 的认证中心配置文件"></a>修改OAuth2 的认证中心配置文件</h3><p>加上sms，这样在后面查找授权模式的时候才能找到,我的是在OAuth2配置文件是在数据库的，有不同的可AuthorizationServerConfiguration中增加配置<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106180657738.jpg#pic_center" alt="在这里插入图片描述"></p><h2 id="调用测试"><a href="#调用测试" class="headerlink" title="调用测试"></a>调用测试</h2><h4 id="输入一个错误的验证码"><a href="#输入一个错误的验证码" class="headerlink" title="输入一个错误的验证码"></a>输入一个错误的验证码</h4><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106182952734.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="输入一个正确的验证码"><a href="#输入一个正确的验证码" class="headerlink" title="输入一个正确的验证码"></a>输入一个正确的验证码</h4><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106183105948.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>最后就能验证成功了</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h4 id="ApplicationContextAwareUtil"><a href="#ApplicationContextAwareUtil" class="headerlink" title="ApplicationContextAwareUtil"></a>ApplicationContextAwareUtil</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存在一些情况无法直接Autowired注入我们需要的类，通过此工具类则可以直接获取spring中的bean</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 根据类名获取实例，例：</span></span><br><span class="line"><span class="comment"> * public StringRedisTemplate stringRedisTemplate = ApplicationContextAwareUtil.getBean(&quot;stringRedisTemplate&quot;);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Component</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApplicationContextAwareUtil</span> <span class="title">implements</span> <span class="title">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span>(<span class="params">ApplicationContext applicationContext</span>) throws BeansException</span> &#123;</span><br><span class="line">        ApplicationContextAwareUtil.applicationContext = applicationContext;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span>(<span class="params">String name</span>) throws BeansException</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (applicationContext == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/grimm/p/13518111.html">Spring Cloud OAuth2实现手机验证码登录</a><br><a href="https://www.cnblogs.com/xingxueliao/p/5911292.html">Spring Security OAuth2 开发指南（非最新版本）</a><br><a href="https://blog.csdn.net/silmeweed/article/details/101603227">Oauth2—AuthorizationServer配置</a><br><a href="https://www.cnblogs.com/fengzheng/p/11724625.html">Spring Cloud OAuth2 实现用户认证及单点登录</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Oauth2-0-实现短信验证码登录过程详解&quot;&gt;&lt;a href=&quot;#Oauth2-0-实现短信验证码登录过程详解&quot; class=&quot;headerlink&quot; title=&quot;Oauth2.0 实现短信验证码登录过程详解&quot;&gt;&lt;/a&gt;Oauth2.0 实现短信验证码登录过程</summary>
      
    
    
    
    <category term="登录" scheme="https://princeling66.github.io/MyBlog/categories/%E7%99%BB%E5%BD%95/"/>
    
    
    <category term="Spring Security" scheme="https://princeling66.github.io/MyBlog/tags/Spring-Security/"/>
    
    <category term="OAuth2" scheme="https://princeling66.github.io/MyBlog/tags/OAuth2/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security 和 OAuth2的简单介绍</title>
    <link href="https://princeling66.github.io/MyBlog/2021/01/05/Spring%20Security%20%E5%92%8C%20OAuth2%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>https://princeling66.github.io/MyBlog/2021/01/05/Spring%20Security%20%E5%92%8C%20OAuth2%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-01-05T10:00:16.000Z</published>
    <updated>2021-01-05T07:29:45.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security-和-OAuth2的简单介绍"><a href="#Spring-Security-和-OAuth2的简单介绍" class="headerlink" title="Spring Security 和 OAuth2的简单介绍"></a>Spring Security 和 OAuth2的简单介绍</h1><h2 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h2><p>Spring Security，这是一种基于 Spring AOP 和 Servlet 过滤器的安全框架。它提供全面的安全性解决方案，同时在 Web 请求级和方法调用级处理身份确认和授权。</p><p>它是一个专注于为Java应用程序提供认证和授权的框架。像所有的Spring项目一样，Spring Security的真正威力在于它可以很容易地扩展以满足客户的需求。</p><p>做web应用时，一般都需要用到安全框架，而现在web应用中，主要有两套安全框架，就是shiro 和 spring security。</p><p>功能上两者都差不多，shiro有的功能spring security都有，而且spring security还有一些额外的功能，就是对OAuth的支持。<img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210105114715321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>上图是网上的一些对比，如果是做单体项目，shiro足以，如果是分布式项目，推荐spring security 和 oauth2.0。</p><h2 id="OAuth2"><a href="#OAuth2" class="headerlink" title="OAuth2"></a>OAuth2</h2><p>OAuth 2.0是业界标准的授权协议。OAuth 2.0注重客户端开发者的简单性，同时为Web应用、桌面应用、手机和客厅设备提供特定的授权流程</p><p>比如微信有些小程序使用的时候需要微信的账号信息，如头像昵称等，这时候就是通过OAuth授权协议将微信的头像昵称信息共享给小程序，而不需要用到微信的账号和密码。<br>还有现在很多网站支持第三方登陆，如支持qq,微博，github等等，这种登陆方式也是基于OAuth2的，不必担心会造成密码泄漏。</p><p><a href="https://www.bilibili.com/video/av35979732?from=search&seid=6370600346221545740">彻底理解 OAuth2 协议</a><br>这个视频深入浅出，浅显易懂的讲述了OAuth2的基本概念，授权模式，应用场景，看完之后对OAuth 2会有一个简单的了解。</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210105145216316.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center"><br>这张图片是网上找来的，个人认为对OAuth2的流程画的很直观，网上其他关于OAuth2的详细解说有很多，感兴趣的可以去看看，这边就简单介绍一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Security-和-OAuth2的简单介绍&quot;&gt;&lt;a href=&quot;#Spring-Security-和-OAuth2的简单介绍&quot; class=&quot;headerlink&quot; title=&quot;Spring Security 和 OAuth2的简单介绍&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="授权" scheme="https://princeling66.github.io/MyBlog/categories/%E6%8E%88%E6%9D%83/"/>
    
    
    <category term="Spring Security" scheme="https://princeling66.github.io/MyBlog/tags/Spring-Security/"/>
    
    <category term="OAuth2" scheme="https://princeling66.github.io/MyBlog/tags/OAuth2/"/>
    
  </entry>
  
  <entry>
    <title>SQL 编写规范</title>
    <link href="https://princeling66.github.io/MyBlog/2020/12/29/SQL%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/"/>
    <id>https://princeling66.github.io/MyBlog/2020/12/29/SQL%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/</id>
    <published>2020-12-29T10:00:16.000Z</published>
    <updated>2020-12-29T09:13:33.779Z</updated>
    
    <content type="html"><![CDATA[<h4 id="SQL-编写规范"><a href="#SQL-编写规范" class="headerlink" title="SQL 编写规范"></a>SQL 编写规范</h4><h6 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h6><ol><li><p>UPDATE、DELETE 操作不使用 LIMIT，必须走 WHERE 精准匹配，LIMIT 是随机的，此类操作会导致数据出错。</p></li><li><p>禁止使用INSERT INTO t_xxx VALUES(xxx)，必须显式指定插入的列属性，避免表结构变动导致数据出错。</p></li><li><p>SQL 语句中最常见的导致索引失效的情况需注意：隐式类型转换，如索引 a 的类型是 varchar，SQL 语句写成 where a = 1; varchar 变成了int。</p></li><li><p>对索引列进行数学计算和函数等操作，例如，使用函数对日期列进行格式化处理。<br>join 列字符集不统一。</p></li><li><p>多列排序顺序不一致问题，如索引是 (a,b)，SQL 语句是 order by a b desclike。<br>模糊查询使用的时候对于字符型xxx%形式可以走到一些索引，其他情况都走不到索引。</p></li><li><p>使用了负方向查询（not，!=，not in 等）。==</p></li></ol><h6 id="建议事项"><a href="#建议事项" class="headerlink" title="建议事项"></a>建议事项</h6><ol><li>按需索取，拒绝select *，规避以下问题：无法索引覆盖，回表操作，增加 I/O。<br>额外的内存负担，大量冷数据灌入innodb_buffer_pool_size，降低查询命中率。<br>额外的网络传输开销。</li><li>尽量避免使用大事务，建议大事务拆小事务，规避主从延迟。<br>业务代码中事务及时提交，避免产生没必要的锁等待。</li><li>少用多表 join，大表禁止 join，两张表 join 必须让小表做驱动表，join 列必须字符集一致并且都建有索引。</li><li>LIMIT 分页优化，LIMIT 80000，10这种操作是取出80010条记录，再返回后10条，数据库压力很大，推荐先确认首记录的位置再分页，例如SELECT * FROM test WHERE id = ( SELECT sql_no_cache id FROM test order by id LIMIT 80000,1 ) LIMIT 10 ;。</li><li>避免多层子查询嵌套的 SQL 语句，MySQL 5.5 之前的查询优化器会把 in 改成 exists，会导致索引失效，若外表很大则性能会很差。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;SQL-编写规范&quot;&gt;&lt;a href=&quot;#SQL-编写规范&quot; class=&quot;headerlink&quot; title=&quot;SQL 编写规范&quot;&gt;&lt;/a&gt;SQL 编写规范&lt;/h4&gt;&lt;h6 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="数据库" scheme="https://princeling66.github.io/MyBlog/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Mysql" scheme="https://princeling66.github.io/MyBlog/tags/Mysql/"/>
    
    <category term="SQL" scheme="https://princeling66.github.io/MyBlog/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>JReble破解</title>
    <link href="https://princeling66.github.io/MyBlog/2020/12/16/JReble%E7%A0%B4%E8%A7%A3/"/>
    <id>https://princeling66.github.io/MyBlog/2020/12/16/JReble%E7%A0%B4%E8%A7%A3/</id>
    <published>2020-12-16T10:00:16.000Z</published>
    <updated>2020-12-17T06:52:16.561Z</updated>
    
    <content type="html"><![CDATA[<h4 id="生成-GUID-的网址"><a href="#生成-GUID-的网址" class="headerlink" title="生成 GUID 的网址"></a>生成 GUID 的网址</h4><p><a href="https://www.guidgen.com/">https://www.guidgen.com/</a></p><h4 id="用这个网址-生成的-GUID-激活"><a href="#用这个网址-生成的-GUID-激活" class="headerlink" title="用这个网址 + 生成的 GUID 激活"></a>用这个网址 + 生成的 GUID 激活</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;jrebel.qekang.com&#x2F;</span><br></pre></td></tr></table></figure><h4 id="如"><a href="#如" class="headerlink" title="如:"></a>如:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;jrebel.qekang.com&#x2F;2df0fa47-95ba-4dec-911b-4209a64b32d4</span><br></pre></td></tr></table></figure><h4 id="粘贴到Team-URL-第一个框中"><a href="#粘贴到Team-URL-第一个框中" class="headerlink" title="粘贴到Team URL 第一个框中"></a>粘贴到Team URL 第一个框中</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntelliJ IDEA --&gt;Preferences --&gt;JReble --&gt; Change License</span><br></pre></td></tr></table></figure><h4 id="设置离线模式-来防止失效"><a href="#设置离线模式-来防止失效" class="headerlink" title="设置离线模式 来防止失效"></a>设置离线模式 来防止失效</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntelliJ IDEA --&gt;Preferences --&gt;JReble --&gt; Work offline</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;生成-GUID-的网址&quot;&gt;&lt;a href=&quot;#生成-GUID-的网址&quot; class=&quot;headerlink&quot; title=&quot;生成 GUID 的网址&quot;&gt;&lt;/a&gt;生成 GUID 的网址&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://www.guidgen.com/&quot;</summary>
      
    
    
    
    <category term="工具" scheme="https://princeling66.github.io/MyBlog/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="JReble" scheme="https://princeling66.github.io/MyBlog/tags/JReble/"/>
    
    <category term="破解" scheme="https://princeling66.github.io/MyBlog/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
</feed>
