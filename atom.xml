<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Princeling66&#39;Blog</title>
  
  <subtitle>这不是BUG 这是feature</subtitle>
  <link href="https://princeling66.github.io/MyBlog/atom.xml" rel="self"/>
  
  <link href="https://princeling66.github.io/MyBlog/"/>
  <updated>2021-06-16T08:35:58.233Z</updated>
  <id>https://princeling66.github.io/MyBlog/</id>
  
  <author>
    <name>wangPei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hystrix 的原理与使用</title>
    <link href="https://princeling66.github.io/MyBlog/2021/06/04/Hystrix%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://princeling66.github.io/MyBlog/2021/06/04/Hystrix%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2021-06-04T10:00:16.000Z</published>
    <updated>2021-06-16T08:35:58.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hystrix-的原理与使用"><a href="#Hystrix-的原理与使用" class="headerlink" title="Hystrix 的原理与使用"></a>Hystrix 的原理与使用</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>分布式系统环境中，服务间的依赖非常常见，一个业务调用通常依赖多个基础服务。 当进行同步调用时，当库存服务不可用时，订单服务请求线程被阻塞，当有大批量请求调用库存服务时，最终可能导致整个订单服务资源耗尽，无法继续对外提供服务。并且这种不可用可能沿请求调用链向上传递，这种现象被称为<strong>雪崩效应</strong>。</p><h2 id="服务雪崩效应的定义"><a href="#服务雪崩效应的定义" class="headerlink" title="服务雪崩效应的定义"></a>服务雪崩效应的定义</h2><p>服务雪崩效应是一种因 <strong>服务提供者</strong> 的不可用导致 <strong>服务调用者</strong> 的不可用,并将不可用 <strong>逐渐放大</strong> 的过程.如果所示:</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://segmentfault.com/img/bVziad" alt="图片描述"></p><p>上图中, A为服务提供者, B为A的服务调用者, C和D是B的服务调用者. 当A的不可用,引起B的不可用,并将不可用逐渐放大C和D时, 服务雪崩就形成了.</p><h2 id="服务雪崩效应形成的原因"><a href="#服务雪崩效应形成的原因" class="headerlink" title="服务雪崩效应形成的原因"></a>服务雪崩效应形成的原因</h2><p>我把服务雪崩的参与者简化为 <strong>服务提供者</strong> 和 <strong>服务调用者</strong>, 并将服务雪崩产生的过程分为以下三个阶段来分析形成的原因:</p><ul><li>服务提供者不可用</li><li>重试加大流量</li><li>服务调用者不可用</li></ul><p><img src= "/MyBlog/img/loading.gif" data-src="https://segmentfault.com/img/bVzh91" alt="图片描述"></p><p>服务雪崩的每个阶段都可能由不同的原因造成, 比如造成 <strong>服务不可用</strong> 的原因有:</p><ul><li>硬件故障：如服务器宕机，机房断电，光纤被挖断等。</li><li>程序Bug：如程序逻辑导致内存泄漏，JVM长时间FullGC等。</li><li>缓存击穿</li><li>用户大量请求：如异常流量，重试加大流量等。</li></ul><p>硬件故障可能为硬件损坏造成的服务器主机宕机, 网络硬件故障造成的服务提供者的不可访问.<br>缓存击穿一般发生在缓存应用重启, 所有缓存被清空时,以及短时间内大量缓存失效时. 大量的缓存不命中, 使请求直击后端,造成服务提供者超负荷运行,引起服务不可用.<br>在秒杀和大促开始前,如果准备不充分,用户发起大量请求也会造成服务提供者的不可用.</p><p>而形成 <strong>重试加大流量</strong> 的原因有:</p><ul><li>用户重试</li><li>代码逻辑重试</li></ul><p>在服务提供者不可用后, 用户由于忍受不了界面上长时间的等待,而不断刷新页面甚至提交表单.<br>服务调用端的会存在大量服务异常后的重试逻辑.<br>这些重试都会进一步加大请求流量.</p><p>最后, <strong>服务调用者不可用</strong> 产生的主要原因是:</p><ul><li>同步等待造成的资源耗尽</li></ul><p>当服务调用者使用 <strong>同步调用</strong> 时, 会产生大量的等待线程占用系统资源. 一旦线程资源被耗尽,服务调用者提供的服务也将处于不可用状态, 于是服务雪崩效应产生了.</p><h2 id="服务雪崩的应对策略"><a href="#服务雪崩的应对策略" class="headerlink" title="服务雪崩的应对策略"></a>服务雪崩的应对策略</h2><p>针对造成服务雪崩的不同原因, 可以使用不同的应对策略:</p><ol><li>流量控制</li><li>改进缓存模式</li><li>服务自动扩容</li><li>服务调用者降级服务</li></ol><p><strong>流量控制</strong> 的具体措施包括:</p><ul><li>网关限流</li><li>用户交互限流</li><li>关闭重试</li></ul><p>因为Nginx的高性能, 目前一线互联网公司大量采用Nginx+Lua的网关进行流量控制, 由此而来的OpenResty也越来越热门.</p><p>用户交互限流的具体措施有: 1. 采用加载动画,提高用户的忍耐等待时间. 2. 提交按钮添加强制等待时间机制.</p><p><strong>改进缓存模式</strong> 的措施包括:</p><ul><li>缓存预加载</li><li>缓存异步加载</li></ul><p><strong>服务自动扩容</strong> 的措施主要有:</p><ul><li>AWS的auto scaling</li></ul><p><strong>服务调用者降级服务</strong> 的措施包括:</p><ul><li>资源隔离</li><li>对依赖服务进行分类</li><li>不可用服务的调用快速失败</li></ul><p>资源隔离通常指不同服务调用采用不同的线程池；</p><p>我们根据具体业务,将依赖服务分为: 强依赖和弱依赖. 强依赖服务不可用会导致当前业务中止,而弱依赖服务的不可用不会导致当前业务的中止.</p><p>不可用服务的调用快速失败一般通过 <strong>超时机制</strong>结合<strong>熔断器</strong> 和熔断后的 <strong>降级方法</strong> 来实现.</p><h2 id="使用Hystrix预防服务雪崩"><a href="#使用Hystrix预防服务雪崩" class="headerlink" title="使用Hystrix预防服务雪崩"></a>使用Hystrix预防服务雪崩</h2><p><strong>Hystrix</strong> [hɪst’rɪks]的中文含义是豪猪, 因其背上长满了刺,而拥有自我保护能力. Netflix的 <strong>Hystrix</strong> 是一个帮助解决分布式系统交互时超时处理和容错的类库, 它同样拥有保护系统的能力.</p><p>Hystrix设计目标：</p><ul><li>对来自依赖的延迟和故障进行防护和控制——这些依赖通常都是通过网络访问的</li><li>阻止故障的连锁反应</li><li>快速失败并迅速恢复</li><li>回退并优雅降级</li><li>提供近实时的监控与告警</li></ul><p>Hystrix的设计原则包括:</p><ul><li>资源隔离</li><li>熔断器</li><li>命令模式</li><li>降级</li></ul><h4 id="资源隔离"><a href="#资源隔离" class="headerlink" title="资源隔离"></a>资源隔离</h4><p>货船为了进行防止漏水和火灾的扩散,会将货仓分隔为多个, 如下图所示:</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://segmentfault.com/img/bVzgLJ" alt="图片描述"></p><p>这种资源隔离减少风险的方式被称为:Bulkheads(舱壁隔离模式).<br>Hystrix将同样的模式运用到了服务调用者上.</p><p>在一个高度服务化的系统中,我们实现的一个业务逻辑通常会依赖多个服务,比如:<br>商品详情展示服务会依赖商品服务, 价格服务, 商品评论服务. 如图所示:</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://segmentfault.com/img/bVzh9U" alt="图片描述"></p><p>调用三个依赖服务会共享商品详情服务的线程池. 如果其中的商品评论服务不可用, 就会出现线程池里所有线程都因等待响应而被阻塞, 从而造成服务雪崩. 如图所示:</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://segmentfault.com/img/bVzh9S" alt="图片描述"></p><p>Hystrix通过将每个依赖服务分配独立的线程池进行资源隔离, 从而避免服务雪崩.<br>如下图所示, 当商品评论服务不可用时, 即使商品服务独立分配的20个线程全部处于同步等待状态,也不会影响其他依赖服务的调用.</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://segmentfault.com/img/bVziah" alt="图片描述"></p><p>资源隔离主要指对线程的隔离。Hystrix提供了两种线程隔离方式：线程池和信号量。</p><h3 id="线程隔离-线程池"><a href="#线程隔离-线程池" class="headerlink" title="线程隔离-线程池"></a><strong>线程隔离-线程池</strong></h3><p>Hystrix通过命令模式对发送请求的对象和执行请求的对象进行解耦，将不同类型的业务请求封装为对应的命令请求。如商品详情服务查询商品，查询商品请求-&gt;商品Command；商品服务查询价格，查询价格请求-&gt;价格Command。并且为每个类型的Command配置一个线程池，当第一次创建Command时，根据配置创建一个线程池，并放入ConcurrentHashMap；后续查询商品的请求创建Command时，将会重用已创建的线程池。通过将发送请求线程与执行请求的线程分离，可有效防止发生级联故障。当线程池或请求队列饱和时，Hystrix将拒绝服务，使得请求线程可以快速失败，从而避免依赖问题扩散。</p><p><strong>线程池隔离优缺点</strong></p><p>优点：</p><ul><li>保护应用程序以免受来自依赖故障的影响，指定依赖线程池饱和不会影响应用程序的其余部分。</li><li>当引入新客户端lib时，即使发生问题，也是在本lib中，并不会影响到其他内容。</li><li>当依赖从故障恢复正常时，应用程序会立即恢复正常的性能。</li><li>当应用程序一些配置参数错误时，线程池的运行状况会很快检测到这一点（通过增加错误，延迟，超时，拒绝等），同时可以通过动态属性进行实时纠正错误的参数配置。</li><li>如果服务的性能有变化，需要实时调整，比如增加或者减少超时时间，更改重试次数，可以通过线程池指标动态属性修改，而且不会影响到其他调用请求。</li><li>除了隔离优势外，hystrix拥有专门的线程池可提供内置的并发功能，使得可以在同步调用之上构建异步门面（外观模式），为异步编程提供了支持（Hystrix引入了Rxjava异步框架）。</li></ul><p>注意：尽管线程池提供了线程隔离，我们的客户端底层代码也必须要有超时设置或响应线程中断，不能无限制的阻塞以致线程池一直饱和。</p><p>缺点：</p><p>线程池的主要缺点是增加了计算开销。每个命令的执行都在单独的线程完成，增加了排队、调度和上下文切换的开销。因此，要使用Hystrix，就必须接受它带来的开销，以换取它所提供的好处。</p><p>通常情况下，线程池引入的开销足够小，不会有重大的成本或性能影响。但对于一些访问延迟极低的服务，如只依赖内存缓存，线程池引入的开销就比较明显了，这时候使用线程池隔离技术就不适合了，我们需要考虑更轻量级的方式，如信号量隔离。</p><h3 id="线程隔离-信号量"><a href="#线程隔离-信号量" class="headerlink" title="线程隔离-信号量"></a><strong>线程隔离-信号量</strong></h3><p>上面提到了线程池隔离的缺点，当依赖延迟极低的服务时，线程池隔离技术引入的开销超过了它所带来的好处。这时候可以使用信号量隔离技术来代替，通过设置信号量来限制对任何给定依赖的并发调用量。</p><p>使用线程池时，发送请求的线程和执行依赖服务的线程不是同一个，而使用信号量时，发送请求的线程和执行依赖服务的线程是同一个，都是发起请求的线程。</p><p>由于Hystrix默认使用线程池做线程隔离，使用信号量隔离需要显示地将属性execution.isolation.strategy设置为ExecutionIsolationStrategy.SEMAPHORE，同时配置信号量个数，默认为10。客户端需向依赖服务发起请求时，首先要获取一个信号量才能真正发起调用，由于信号量的数量有限，当并发请求量超过信号量个数时，后续的请求都会直接拒绝，进入fallback流程。</p><p>信号量隔离主要是通过控制并发请求量，防止请求线程大面积阻塞，从而达到限流和防止雪崩的目的。</p><h3 id="线程隔离总结"><a href="#线程隔离总结" class="headerlink" title="线程隔离总结"></a><strong>线程隔离总结</strong></h3><p>线程池和信号量都可以做线程隔离，但各有各的优缺点和支持的场景，对比如下：</p><table><thead><tr><th></th><th>线程切换</th><th>支持异步</th><th>支持超时</th><th>支持熔断</th><th>限流</th><th>开销</th></tr></thead><tbody><tr><td>信号量</td><td>否</td><td>否</td><td>否</td><td>是</td><td>是</td><td>小</td></tr><tr><td>线程池</td><td>是</td><td>是</td><td>是</td><td>是</td><td>是</td><td>大</td></tr></tbody></table><p>线程池和信号量都支持熔断和限流。相比线程池，信号量不需要线程切换，因此避免了不必要的开销。但是信号量不支持异步，也不支持超时，也就是说当所请求的服务不可用时，信号量会控制超过限制的请求立即返回，但是已经持有信号量的线程只能等待服务响应或从超时中返回，即可能出现长时间等待。线程池模式下，当超过指定时间未响应的服务，Hystrix会通过响应中断的方式通知线程立即结束并返回。</p><h4 id="熔断器模式"><a href="#熔断器模式" class="headerlink" title="熔断器模式"></a>熔断器模式</h4><p>现实生活中，可能大家都有注意到家庭电路中通常会安装一个保险盒，当负载过载时，保险盒中的保险丝会自动熔断，以保护电路及家里的各种电器，这就是熔断器的一个常见例子。Hystrix中的熔断器(Circuit Breaker)也是起类似作用，Hystrix在运行过程中会向每个commandKey对应的熔断器报告成功、失败、超时和拒绝的状态，熔断器维护并统计这些数据，并根据这些统计信息来决策熔断开关是否打开。如果打开，熔断后续请求，快速返回。隔一段时间（默认是5s）之后熔断器尝试半开，放入一部分流量请求进来，相当于对依赖服务进行一次健康检查，如果请求成功，熔断器关闭。</p><p>熔断器模式定义了熔断器开关相互转换的逻辑:</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://segmentfault.com/img/bVziaa" alt="图片描述"></p><p>服务的健康状况 = 请求失败数 / 请求总数.<br>熔断器开关由关闭到打开的状态转换是通过当前服务健康状况和设定阈值比较决定的.</p><ol><li>当熔断器开关关闭时, 请求被允许通过熔断器. 如果当前健康状况高于设定阈值, 开关继续保持关闭. 如果当前健康状况低于设定阈值, 开关则切换为打开状态.</li><li>当熔断器开关打开时, 请求被禁止通过.</li><li>当熔断器开关处于打开状态, 经过一段时间后, 熔断器会自动进入半开状态, 这时熔断器只允许一个请求通过. 当该请求调用成功时, 熔断器恢复到关闭状态. 若该请求失败, 熔断器继续保持打开状态, 接下来的请求被禁止通过.</li></ol><p>熔断器的开关能保证服务调用者在调用异常服务时, 快速返回结果, 避免大量的同步等待. 并且熔断器能在一段时间后继续侦测请求执行结果, 提供恢复服务调用的可能.</p><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><p>Hystrix使用命令模式(继承HystrixCommand类)来包裹具体的服务调用逻辑(run方法), 并在命令模式中添加了服务调用失败后的降级逻辑(getFallback).<br>同时我们在Command的构造方法中可以定义当前服务线程池和熔断器的相关参数. 如下代码所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service1HystrixCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">Response</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Service1 service;</span><br><span class="line">  <span class="keyword">private</span> Request request;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Service1HystrixCommand</span><span class="params">(Service1 service, Request request)</span></span>&#123;</span><br><span class="line">    supper(</span><br><span class="line">      Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">&quot;ServiceGroup&quot;</span>))</span><br><span class="line">          .andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">&quot;servcie1query&quot;</span>))</span><br><span class="line">          .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class="string">&quot;service1ThreadPool&quot;</span>))</span><br><span class="line">          .andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.Setter()</span><br><span class="line">            .withCoreSize(<span class="number">20</span>))<span class="comment">//服务线程池数量</span></span><br><span class="line">          .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()</span><br><span class="line">            .withCircuitBreakerErrorThresholdPercentage(<span class="number">60</span>)<span class="comment">//熔断器关闭到打开阈值</span></span><br><span class="line">            .withCircuitBreakerSleepWindowInMilliseconds(<span class="number">3000</span>)<span class="comment">//熔断器打开到关闭的时间窗长度</span></span><br><span class="line">      ))</span><br><span class="line">      <span class="keyword">this</span>.service = service;</span><br><span class="line">      <span class="keyword">this</span>.request = request;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Response <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> service1.call(request);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Response <span class="title">getFallback</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Response.dummy();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用了Command模式构建了服务对象之后, 服务便拥有了熔断器和线程池的功能.</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://segmentfault.com/img/bVzh96" alt="图片描述"></p><h4 id="Hystrix的内部处理逻辑"><a href="#Hystrix的内部处理逻辑" class="headerlink" title="Hystrix的内部处理逻辑"></a>Hystrix的内部处理逻辑</h4><p>下图为Hystrix服务调用的内部逻辑:</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://segmentfault.com/img/bVziap" alt="图片描述"></p><ol><li>构建Hystrix的Command对象, 调用执行方法.</li><li>Hystrix检查当前服务的熔断器开关是否开启, 若开启, 则执行降级服务getFallback方法.</li><li>若熔断器开关关闭, 则Hystrix检查当前服务的线程池是否能接收新的请求, 若超过线程池已满, 则执行降级服务getFallback方法.</li><li>若线程池接受请求, 则Hystrix开始执行服务调用具体逻辑run方法.</li><li>若服务执行失败, 则执行降级服务getFallback方法, 并将执行结果上报Metrics更新服务健康状况.</li><li>若服务执行超时, 则执行降级服务getFallback方法, 并将执行结果上报Metrics更新服务健康状况.</li><li>若服务执行成功, 返回正常结果.</li><li>若服务降级方法getFallback执行成功, 则返回降级结果.</li><li>若服务降级方法getFallback执行失败, 则抛出异常.</li></ol><h2 id="回退降级"><a href="#回退降级" class="headerlink" title="回退降级"></a><strong>回退降级</strong></h2><p>降级，通常指务高峰期，为了保证核心服务正常运行，需要停掉一些不太重要的业务，或者某些服务不可用时，执行备用逻辑从故障服务中快速失败或快速返回，以保障主体业务不受影响。Hystrix提供的降级主要是为了容错，保证当前服务不受依赖服务故障的影响，从而提高服务的健壮性。要支持回退或降级处理，可以重写HystrixCommand的getFallBack方法或HystrixObservableCommand的resumeWithFallback方法。</p><p>Hystrix在以下几种情况下会走降级逻辑：</p><ul><li>执行construct()或run()抛出异常</li><li>熔断器打开导致命令短路</li><li>命令的线程池和队列或信号量的容量超额，命令被拒绝</li><li>命令执行超时</li></ul><h3 id="降级回退方式"><a href="#降级回退方式" class="headerlink" title="降级回退方式"></a><strong>降级回退方式</strong></h3><p><strong>Fail Fast 快速失败</strong></p><p>快速失败是最普通的命令执行方法，命令没有重写降级逻辑。 如果命令执行发生任何类型的故障，它将直接抛出异常。</p><p><strong>Fail Silent 无声失败</strong></p><p>指在降级方法中通过返回null，空Map，空List或其他类似的响应来完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Integer <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;Integer&gt; <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Observable&lt;Integer&gt; <span class="title">resumeWithFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> Observable.empty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Fallback: Static</strong></p><p>指在降级方法中返回静态默认值。 这不会导致服务以“无声失败”的方式被删除，而是导致默认行为发生。如：应用根据命令执行返回true / false执行相应逻辑，但命令执行失败，则默认为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Boolean <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Observable&lt;Boolean&gt; <span class="title">resumeWithFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Observable.just( <span class="keyword">true</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Fallback: Stubbed</strong></p><p>当命令返回一个包含多个字段的复合对象时，适合以Stubbed 的方式回退。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> MissionInfo <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> MissionInfo(<span class="string">&quot;missionName&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Fallback: Cache via Network</strong></p><p>有时，如果调用依赖服务失败，可以从缓存服务（如redis）中查询旧数据版本。由于又会发起远程调用，所以建议重新封装一个Command，使用不同的ThreadPoolKey，与主线程池进行隔离。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Integer <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> RedisServiceCommand(redisService).execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Primary + Secondary with Fallback</strong></p><p>有时系统具有两种行为- 主要和次要，或主要和故障转移。主要和次要逻辑涉及到不同的网络调用和业务逻辑，所以需要将主次逻辑封装在不同的Command中，使用线程池进行隔离。为了实现主从逻辑切换，可以将主次command封装在外观HystrixCommand的run方法中，并结合配置中心设置的开关切换主从逻辑。由于主次逻辑都是经过线程池隔离的HystrixCommand，因此外观HystrixCommand可以使用信号量隔离，而没有必要使用线程池隔离引入不必要的开销。</p><p>主次模型的使用场景还是很多的。如当系统升级新功能时，如果新版本的功能出现问题，通过开关控制降级调用旧版本的功能。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandFacadeWithPrimarySecondary</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DynamicBooleanProperty usePrimary = DynamicPropertyFactory.getInstance().getBooleanProperty(<span class="string">&quot;primarySecondary.usePrimary&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommandFacadeWithPrimarySecondary</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Setter</span><br><span class="line">                .withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">&quot;SystemX&quot;</span>))</span><br><span class="line">                .andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">&quot;PrimarySecondaryCommand&quot;</span>))</span><br><span class="line">                .andCommandPropertiesDefaults(</span><br><span class="line">                        <span class="comment">// 由于主次command已经使用线程池隔离，Facade Command使用信号量隔离即可</span></span><br><span class="line">                        HystrixCommandProperties.Setter()</span><br><span class="line">                                .withExecutionIsolationStrategy(ExecutionIsolationStrategy.SEMAPHORE)));</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (usePrimary.get()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PrimaryCommand(id).execute();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SecondaryCommand(id).execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;static-fallback-&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getCacheKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(id);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimaryCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">PrimaryCommand</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(Setter</span><br><span class="line">                    .withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">&quot;SystemX&quot;</span>))</span><br><span class="line">                    .andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">&quot;PrimaryCommand&quot;</span>))</span><br><span class="line">                    .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class="string">&quot;PrimaryCommand&quot;</span>))</span><br><span class="line">                    .andCommandPropertiesDefaults(                          HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(<span class="number">600</span>)));</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;responseFromPrimary-&quot;</span> + id;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondaryCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">SecondaryCommand</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(Setter</span><br><span class="line">                    .withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">&quot;SystemX&quot;</span>))</span><br><span class="line">                    .andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">&quot;SecondaryCommand&quot;</span>))</span><br><span class="line">                    .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class="string">&quot;SecondaryCommand&quot;</span>))</span><br><span class="line">                    .andCommandPropertiesDefaults(  HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(<span class="number">100</span>)));</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;responseFromSecondary-&quot;</span> + id;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UnitTest</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrimary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ConfigurationManager.getConfigInstance().setProperty(<span class="string">&quot;primarySecondary.usePrimary&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">                assertEquals(<span class="string">&quot;responseFromPrimary-20&quot;</span>, <span class="keyword">new</span> CommandFacadeWithPrimarySecondary(<span class="number">20</span>).execute());</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                context.shutdown();</span><br><span class="line">                ConfigurationManager.getConfigInstance().clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSecondary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ConfigurationManager.getConfigInstance().setProperty(<span class="string">&quot;primarySecondary.usePrimary&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">                assertEquals(<span class="string">&quot;responseFromSecondary-20&quot;</span>, <span class="keyword">new</span> CommandFacadeWithPrimarySecondary(<span class="number">20</span>).execute());</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                context.shutdown();</span><br><span class="line">                ConfigurationManager.getConfigInstance().clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常情况下，建议重写getFallBack或resumeWithFallback提供自己的备用逻辑，但不建议在回退逻辑中执行任何可能失败的操作。</p><h2 id="Hystrix-Metrics的实现"><a href="#Hystrix-Metrics的实现" class="headerlink" title="Hystrix Metrics的实现"></a>Hystrix Metrics的实现</h2><p>Hystrix的Metrics中保存了当前服务的健康状况, 包括服务调用总次数和服务调用失败次数等. 根据Metrics的计数, 熔断器从而能计算出当前服务的调用失败率, 用来和设定的阈值比较从而决定熔断器的状态切换逻辑. 因此Metrics的实现非常重要.</p><h4 id="1-4之前的滑动窗口实现"><a href="#1-4之前的滑动窗口实现" class="headerlink" title="1.4之前的滑动窗口实现"></a>1.4之前的滑动窗口实现</h4><p>Hystrix在这些版本中的使用自己定义的滑动窗口数据结构来记录当前时间窗的各种事件(成功,失败,超时,线程池拒绝等)的计数.<br>事件产生时, 数据结构根据当前时间确定使用旧桶还是创建新桶来计数, 并在桶中对计数器经行修改.<br>这些修改是多线程并发执行的, 代码中有不少加锁操作,逻辑较为复杂.</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://segmentfault.com/img/bVzh9Y" alt="图片描述"></p><h4 id="1-5之后的滑动窗口实现"><a href="#1-5之后的滑动窗口实现" class="headerlink" title="1.5之后的滑动窗口实现"></a>1.5之后的滑动窗口实现</h4><p>Hystrix在这些版本中开始使用RxJava的Observable.window()实现滑动窗口.<br>RxJava的window使用后台线程创建新桶, 避免了并发创建桶的问题.<br>同时RxJava的单线程无锁特性也保证了计数变更时的线程安全. 从而使代码更加简洁.<br>以下为我使用RxJava的window方法实现的一个简易滑动窗口Metrics, 短短几行代码便能完成统计功能,足以证明RxJava的强大:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeWindowTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">  Observable&lt;Integer&gt; source = Observable.interval(<span class="number">50</span>, TimeUnit.MILLISECONDS).map(i -&gt; RandomUtils.nextInt(<span class="number">2</span>));</span><br><span class="line">  source.window(<span class="number">1</span>, TimeUnit.SECONDS).subscribe(window -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span>[] metrics = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    window.subscribe(i -&gt; metrics[i]++,</span><br><span class="line">      InternalObservableUtils.ERROR_NOT_IMPLEMENTED,</span><br><span class="line">      () -&gt; System.out.println(<span class="string">&quot;窗口Metrics:&quot;</span> + JSON.toJSONString(metrics)));</span><br><span class="line">  &#125;);</span><br><span class="line">  TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过使用Hystrix,我们能方便的防止雪崩效应, 同时使系统具有自动降级和自动恢复服务的效果.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hystrix-的原理与使用&quot;&gt;&lt;a href=&quot;#Hystrix-的原理与使用&quot; class=&quot;headerlink&quot; title=&quot;Hystrix 的原理与使用&quot;&gt;&lt;/a&gt;Hystrix 的原理与使用&lt;/h2&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot;</summary>
      
    
    
    
    <category term="Hystrix" scheme="https://princeling66.github.io/MyBlog/categories/Hystrix/"/>
    
    
    <category term="微服务" scheme="https://princeling66.github.io/MyBlog/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>大厂面试必备之消息队列连环问【转载】</title>
    <link href="https://princeling66.github.io/MyBlog/2021/03/27/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E5%BF%85%E5%A4%87%E4%B9%8B%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E8%BF%9E%E7%8E%AF%E9%97%AE%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91/"/>
    <id>https://princeling66.github.io/MyBlog/2021/03/27/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E5%BF%85%E5%A4%87%E4%B9%8B%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E8%BF%9E%E7%8E%AF%E9%97%AE%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91/</id>
    <published>2021-03-27T10:00:16.000Z</published>
    <updated>2021-03-27T14:50:32.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大厂面试必备之消息队列连环问【转载】"><a href="#大厂面试必备之消息队列连环问【转载】" class="headerlink" title="大厂面试必备之消息队列连环问【转载】"></a>大厂面试必备之消息队列连环问【转载】</h2><p>开门见山，我们直接从常见的面试问题入手：</p><ul><li>如何保证消息不丢失？</li><li>如何处理重复消息？</li><li>如何保证消息的有序性？</li><li>如何处理消息堆积？</li></ul><p>当然在剖析这几个问题之前需要简单的介绍下什么是<strong>消息队列</strong>，消息队列常见的一些<strong>基本术语和概念</strong>。</p><p>接下来进入正文。</p><h2 id="什么是消息队列"><a href="#什么是消息队列" class="headerlink" title="什么是消息队列"></a>什么是消息队列</h2><p>来看看维基百科怎么说的，顺带学学英语这波不亏：</p><p>In computer science, message queues and mailboxes are software-engineering components typically used for inter-process communication (IPC), or for inter-thread communication within the same process. They use a queue for messaging – the passing of control or of content. Group communication systems provide similar kinds of functionality.</p><p>翻译一下：在计算机科学领域，消息队列和邮箱都是软件工程组件，通常用于进程间或同一进程内的线程通信。它们通过队列来传递消息-传递控制信息或内容，群组通信系统提供类似的功能。</p><p>简单的概括下上面的定义：<strong>消息队列就是一个使用队列来通信的组件</strong>。</p><p>上面的定义没有错，但就现在而言我们日常所说的<strong>消息队列常常指代的是消息中间件</strong>，它的存在不仅仅只是为了通信这个问题。</p><h2 id="为什么需要消息队列"><a href="#为什么需要消息队列" class="headerlink" title="为什么需要消息队列"></a>为什么需要消息队列</h2><p>从本质上来说是因为互联网的快速发展，<strong>业务不断扩张</strong>，促使技术架构需要不断的演进。</p><p>从以前的单体架构到现在的微服务架构，成百上千的服务之间相互调用和依赖。从互联网初期一个服务器上有 100 个在线用户已经很了不得，到现在坐拥10亿日活的微信。我们需要有一个「东西」来解耦服务之间的关系、控制资源合理合时的使用以及缓冲流量洪峰等等。</p><p>消息队列就应运而生了。它常用来实现：<strong>异步处理、服务解耦、流量控制</strong>。</p><h2 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h2><p>随着公司的发展你可能会发现你项目的<strong>请求链路越来越长</strong>，例如刚开始的电商项目，可以就是粗暴的扣库存、下单。慢慢地又加上积分服务、短信服务等。这一路同步调用下来客户可能等急了，这时候就是消息队列登场的好时机。</p><p><strong>调用链路长、响应就慢了</strong>，并且相对于扣库存和下单，积分和短信没必要这么的 “及时”。因此只需要在下单结束那个流程，扔个消息到消息队列中就可以直接返回响应了。而且积分服务和短信服务可以并行的消费这条消息。</p><p>可以看出消息队列可以<strong>减少请求的等待，还能让服务异步并发处理，提升系统总体性能</strong>。</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021032719100273.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="服务解耦"><a href="#服务解耦" class="headerlink" title="服务解耦"></a>服务解耦</h2><p>上面我们说到加了积分服务和短信服务，这时候可能又要来个营销服务，之后领导又说想做个大数据，又来个数据分析服务等等。</p><p>可以发现订单的下游系统在不断的扩充，为了迎合这些下游系统订单服务需要经常地修改，任何一个下游系统接口的变更可能都会影响到订单服务，这订单服务组可疯了，<strong>真 ·「核心」项目组</strong>。</p><p>所以一般会选用消息队列来解决系统之间耦合的问题，订单服务把订单相关消息塞到消息队列中，下游系统谁要谁就订阅这个主题。这样订单服务就解放啦！<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210327191103249.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><p>想必大家都听过「削峰填谷」，后端服务相对而言都是比较「弱」的，因为业务较重，处理时间较长。像一些例如秒杀活动爆发式流量打过来可能就顶不住了。因此需要引入一个中间件来做缓冲，消息队列再适合不过了。</p><p>网关的请求先放入消息队列中，后端服务尽自己最大能力去消息队列中消费请求。超时的请求可以直接返回错误。</p><p>当然还有一些服务特别是某些后台任务，不需要及时地响应，并且业务处理复杂且流程长，那么过来的请求先放入消息队列中，后端服务按照自己的节奏处理。这也是很 nice 的。</p><p>上面两种情况分别对应着生产者生产过快和消费者消费过慢两种情况，消息队列都能在其中发挥很好的缓冲效果。</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210327191133381.jpg#pic_center" alt="在这里插入图片描述"></p><p><strong>注意</strong><br>引入消息队列固然有以上的好处，但是多引入一个中间件系统的稳定性就下降一层，运维的难度抬高一层。因此要<strong>权衡利弊，系统是演进的</strong>。</p><h2 id="消息队列基本概念"><a href="#消息队列基本概念" class="headerlink" title="消息队列基本概念"></a>消息队列基本概念</h2><p>消息队列有两种模型：<strong>队列模型</strong>和<strong>发布/订阅模型</strong>。</p><h2 id="队列模型"><a href="#队列模型" class="headerlink" title="队列模型"></a>队列模型</h2><p>生产者往某个队列里面发送消息，一个队列可以存储多个生产者的消息，一个队列也可以有多个消费者， 但是消费者之间是竞争关系，即每条消息只能被一个消费者消费。</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210327224252939.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="发布-订阅模型"><a href="#发布-订阅模型" class="headerlink" title="发布/订阅模型"></a>发布/订阅模型</h2><p><strong>为了解决一条消息能被多个消费者消费的问题</strong>，发布/订阅模型就来了。该模型是将消息发往一个Topic即主题中，所有订阅了这个 Topic 的订阅者都能消费这条消息。</p><p>其实可以这么理解，发布/订阅模型等于我们都加入了一个群聊中，我发一条消息，加入了这个群聊的人都能收到这条消息。那么队列模型就是一对一聊天，我发给你的消息，只能在你的聊天窗口弹出，是不可能弹出到别人的聊天窗口中的。</p><p>讲到这有人说，那我一对一聊天对每个人都发同样的消息不就也实现了一条消息被多个人消费了嘛。</p><p>是的，通过多队列全量存储相同的消息，即数据的冗余可以实现一条消息被多个消费者消费。RabbitMQ 就是采用队列模型，通过 Exchange 模块来将消息发送至多个队列，解决一条消息需要被多个消费者消费问题。</p><p>这里还能看到假设群聊里除我之外只有一个人，那么此时的发布/订阅模型和队列模型其实就一样了。</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210327191418374.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h2><p>队列模型每条消息只能被一个消费者消费，而发布/订阅模型就是为让一条消息可以被多个消费者消费而生的，当然队列模型也可以通过消息全量存储至多个队列来解决一条消息被多个消费者消费问题，但是会有数据的冗余。</p><p><strong>发布/订阅模型兼容队列模型</strong>，即只有一个消费者的情况下和队列模型基本一致。</p><p>RabbitMQ 采用队列模型，RocketMQ和Kafka 采用发布/订阅模型。</p><p><strong>接下来的内容都基于发布/订阅模型。</strong></p><h2 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h2><p>一般我们称发送消息方为生产者 Producer，接受消费消息方为消费者Consumer，消息队列服务端为Broker。</p><p>消息从Producer发往Broker，Broker将消息存储至本地，然后Consumer从Broker拉取消息，或者Broker推送消息至Consumer，最后消费。</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210327191459969.jpg#pic_center" alt="在这里插入图片描述"></p><p>为了提高并发度，往往<strong>发布/订阅模型</strong>还会引入<strong>队列</strong>或者<strong>分区</strong>的概念。即消息是发往一个主题下的某个队列或者某个分区中。RocketMQ中叫队列，Kafka叫分区，本质一样。</p><p>例如某个主题下有 5 个队列，那么这个主题的并发度就提高为 5 ，同时可以有 5 个消费者<strong>并行消费</strong>该主题的消息。一般可以采用轮询或者 key hash 取余等策略来将同一个主题的消息分配到不同的队列中。</p><p>与之对应的消费者一般都有组的概念 Consumer Group, 即消费者都是属于某个消费组的。一条消息会发往多个订阅了这个主题的消费组。</p><p>假设现在有两个消费组分别是Group 1 和 Group 2，它们都订阅了Topic-a。此时有一条消息发往Topic-a，那么这两个消费组都能接收到这条消息。</p><p>然后这条消息实际是写入Topic某个队列中，消费组中的某个消费者对应消费一个队列的消息。</p><p>在物理上除了副本拷贝之外，一条消息在Broker中只会有一份，每个消费组会有自己的offset即消费点位来标识消费到的位置。在消费点位之前的消息表明已经消费过了。当然这个offset是队列级别的。每个消费组都会维护订阅的Topic下的每个队列的offset。</p><p>来个图看看应该就很清晰了。</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210327191543990.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>基本上熟悉了消息队列常见的术语和一些概念之后，咱们再来看看消息队列常见的核心面试点。</p><h2 id="如何保证消息不丢失"><a href="#如何保证消息不丢失" class="headerlink" title="如何保证消息不丢失"></a>如何保证消息不丢失</h2><p>就我们市面上常见的消息队列而言，只要<strong>配置得当</strong>，我们的消息就不会丢。</p><p>先来看看这个图，</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210327191630933.jpg#pic_center" alt="在这里插入图片描述"></p><p>可以看到一共有三个阶段，分别是<strong>生产消息、存储消息和消费消息</strong>。我们从这三个阶段分别入手来看看如何确保消息不会丢失。</p><h2 id="生产消息"><a href="#生产消息" class="headerlink" title="生产消息"></a>生产消息</h2><p>生产者发送消息至Broker，需要处理Broker的响应，不论是同步还是异步发送消息，同步和异步回调都需要做好try-catch，妥善的处理响应，如果Broker返回写入失败等错误消息，需要重试发送。当多次发送失败需要作报警，日志记录等。</p><p>这样就能保证在生产消息阶段消息不会丢失。</p><h2 id="存储消息"><a href="#存储消息" class="headerlink" title="存储消息"></a>存储消息</h2><p>存储消息阶段需要在<strong>消息刷盘之后</strong>再给生产者响应，假设消息写入缓存中就返回响应，那么机器突然断电这消息就没了，而生产者以为已经发送成功了。</p><p>如果Broker是集群部署，有多副本机制，即消息不仅仅要写入当前Broker,还需要写入副本机中。那配置成至少写入两台机子后再给生产者响应。这样基本上就能保证存储的可靠了。一台挂了还有一台还在呢（假如怕两台都挂了..那就再多些）。</p><p>那假如来个地震机房机子都挂了呢？emmmmmm…大公司基本上都有异地多活。</p><p>那要是这几个地都地震了呢？emmmmmm…这时候还是先关心关心人吧。</p><h2 id="消费消息"><a href="#消费消息" class="headerlink" title="消费消息"></a>消费消息</h2><p>这里经常会有同学犯错，有些同学当消费者拿到消息之后直接存入内存队列中就直接返回给Broker消费成功，这是不对的。</p><p>你需要考虑拿到消息放在内存之后消费者就宕机了怎么办。所以我们应该在<strong>消费者真正执行完业务逻辑之后，再发送给Broker消费成功</strong>，这才是真正的消费了。</p><p>所以只要我们在消息业务逻辑处理完成之后再给Broker响应，那么消费阶段消息就不会丢失。</p><h2 id="小结一下-1"><a href="#小结一下-1" class="headerlink" title="小结一下"></a>小结一下</h2><p>可以看出，保证消息的可靠性需要<strong>三方配合</strong>。</p><p>生产者需要处理好Broker的响应，出错情况下利用重试、报警等手段。</p><p>Broker需要控制响应的时机，单机情况下是消息刷盘后返回响应，集群多副本情况下，即发送至两个副本及以上的情况下再返回响应。</p><p>消费者需要在执行完真正的业务逻辑之后再返回响应给Broker。</p><p>但是要注意消息<strong>可靠性增强了，性能就下降了</strong>，等待消息刷盘、多副本同步后返回都会影响性能。因此还是看业务，例如日志的传输可能丢那么一两条关系不大，因此没必要等消息刷盘再响应。</p><h2 id="如果处理重复消息"><a href="#如果处理重复消息" class="headerlink" title="如果处理重复消息"></a>如果处理重复消息</h2><p>我们先来看看能不能避免消息的重复。</p><p>假设我们发送消息，就管发，不管Broker的响应，那么我们发往Broker是不会重复的。</p><p>但是一般情况我们是不允许这样的，这样消息就完全不可靠了，我们的基本需求是消息至少得发到Broker上，那就得等Broker的响应，那么就可能存在Broker已经写入了，当时响应由于网络原因生产者没有收到，然后生产者又重发了一次，此时消息就重复了。</p><p>再看消费者消费的时候，假设我们消费者拿到消息消费了，业务逻辑已经走完了，事务提交了，此时需要更新Consumer offset了，然后这个消费者挂了，另一个消费者顶上，此时Consumer offset还没更新，于是又拿到刚才那条消息，业务又被执行了一遍。于是消息又重复了。</p><p>可以看到正常业务而言<strong>消息重复是不可避免的</strong>，因此我们只能从<strong>另一个角度</strong>来解决重复消息的问题。</p><p>关键点就是<strong>幂等</strong>。既然我们不能防止重复消息的产生，那么我们只能在业务上处理重复消息所带来的影响。</p><h2 id="幂等处理重复消息"><a href="#幂等处理重复消息" class="headerlink" title="幂等处理重复消息"></a>幂等处理重复消息</h2><p>幂等是数学上的概念，我们就理解为同样的参数多次调用同一个接口和调用一次产生的结果是一致的。</p><p>例如这条 SQL<code>update t1 set money = 150 where id = 1 and money = 100;</code> 执行多少遍<code>money</code>都是150，这就叫<strong>幂等</strong>。</p><p>因此需要改造业务处理逻辑，使得在重复消息的情况下也不会影响最终的结果。</p><p>可以通过上面我那条 SQL 一样，做了个<strong>前置条件判断</strong>，即<code>money = 100</code>情况，并且直接修改，更通用的是做个<code>version</code>即版本号控制，对比消息中的版本号和数据库中的版本号。</p><p>或者通过<strong>数据库的约束例如唯一键</strong>，例如<code>insert into update on duplicate key...</code>。</p><p>或者<strong>记录关键的key</strong>，比如处理订单这种，记录订单ID，假如有重复的消息过来，先判断下这个ID是否已经被处理过了，如果没处理再进行下一步。当然也可以用全局唯一ID等等。</p><p>基本上就这么几个套路，<strong>真正应用到实际中还是得看具体业务细节</strong>。</p><h2 id="如何保证消息的有序性"><a href="#如何保证消息的有序性" class="headerlink" title="如何保证消息的有序性"></a>如何保证消息的有序性</h2><p>有序性分：<strong>全局有序和部分有序</strong>。</p><h2 id="全局有序"><a href="#全局有序" class="headerlink" title="全局有序"></a>全局有序</h2><p>如果要保证消息的全局有序，首先只能由一个生产者往Topic发送消息，并且一个Topic内部只能有一个队列（分区）。消费者也必须是单线程消费这个队列。这样的消息就是全局有序的！</p><p>不过一般情况下我们都不需要全局有序，即使是同步MySQL Binlog也只需要保证单表消息有序即可。</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210327223935909.jpg#pic_center" alt="在这里插入图片描述"></p><p><strong>部分有序</strong><br>因此绝大部分的有序需求是部分有序，部分有序我们就可以将Topic内部划分成我们需要的队列数，把消息通过特定的策略发往固定的队列中，然后每个队列对应一个单线程处理的消费者。这样即完成了部分有序的需求，又可以通过队列数量的并发来提高消息处理效率。</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210327223957933.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图中我画了多个生产者，一个生产者也可以，只要同类消息发往指定的队列即可。</p><h2 id="如果处理消息堆积"><a href="#如果处理消息堆积" class="headerlink" title="如果处理消息堆积"></a>如果处理消息堆积</h2><p>消息的堆积往往是因为<strong>生产者的生产速度与消费者的消费速度不匹配</strong>。有可能是因为消息消费失败反复重试造成的，也有可能就是消费者消费能力弱，渐渐地消息就积压了。</p><p>因此我们需要<strong>先定位消费慢的原因</strong>，如果是bug则处理 bug ，如果是因为本身消费能力较弱，我们可以优化下消费逻辑，比如之前是一条一条消息消费处理的，这次我们批量处理，比如数据库的插入，一条一条插和批量插效率是不一样的。</p><p>假如逻辑我们已经都优化了，但还是慢，那就得考虑水平扩容了，增加Topic的队列数和消费者数量，<strong>注意队列数一定要增加</strong>，不然新增加的消费者是没东西消费的。<strong>一个Topic中</strong>，<strong>一个队列只会分配给一个消费者</strong>。</p><p>当然你消费者内部是单线程还是多线程消费那看具体场景。不过要注意上面提高的消息丢失的问题，如果你是将接受到的消息写入<strong>内存队列</strong>之后，然后就返回响应给Broker，然后多线程向内存队列消费消息，假设此时消费者宕机了，内存队列里面还未消费的消息也就丢了。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>上面的几个问题都是我们在使用消息队列的时候经常能遇到的问题，并且也是面试关于消息队列方面的<strong>核心考点</strong>，从大方向上搞明白很有必要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;大厂面试必备之消息队列连环问【转载】&quot;&gt;&lt;a href=&quot;#大厂面试必备之消息队列连环问【转载】&quot; class=&quot;headerlink&quot; title=&quot;大厂面试必备之消息队列连环问【转载】&quot;&gt;&lt;/a&gt;大厂面试必备之消息队列连环问【转载】&lt;/h2&gt;&lt;p&gt;开门见山，我</summary>
      
    
    
    
    <category term="消息队列" scheme="https://princeling66.github.io/MyBlog/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
    <category term="消息队列" scheme="https://princeling66.github.io/MyBlog/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Oauth2.0 实现短信验证码登录过程详解</title>
    <link href="https://princeling66.github.io/MyBlog/2021/01/07/Oauth2.0%20%E5%AE%9E%E7%8E%B0%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E7%99%BB%E5%BD%95%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3(%E5%BE%AE%E6%9C%8D%E5%8A%A1)/"/>
    <id>https://princeling66.github.io/MyBlog/2021/01/07/Oauth2.0%20%E5%AE%9E%E7%8E%B0%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E7%99%BB%E5%BD%95%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3(%E5%BE%AE%E6%9C%8D%E5%8A%A1)/</id>
    <published>2021-01-07T10:30:16.000Z</published>
    <updated>2021-01-07T02:59:40.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Oauth2-0-实现短信验证码登录过程详解"><a href="#Oauth2-0-实现短信验证码登录过程详解" class="headerlink" title="Oauth2.0 实现短信验证码登录过程详解"></a>Oauth2.0 实现短信验证码登录过程详解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>公司新分配了微服务的项目，要求在已有密码登陆的架构上增加手机验证码登陆功能，原有的密码登陆都没摸清的我懵逼了，百度看了很多Spring Security 和 OAuth2基本概念还有一些如何实现短信验证码登录功能的博客，很多文章一上来就给你展示n个类的，或者直接贴上一大堆代码的，对于才了解一点基本概念的我来说属实有点难啃，好在找到了一位大佬将思路以及实现写的很清晰的文章，鉴于大佬的文章图片挺模糊的，我把这几天弄出来的功能简单整理一下，做个记录。(不想看分析，想直接简单粗暴开始干的请直接跳到标题为编码阶段的开始看)</p><p>阅读本文需要的基础知识：</p><ul><li>熟练掌握Java</li><li>掌握了Spring Boot基础知识</li><li>默认已经整合好密码模式</li></ul><h3 id="架构搭建"><a href="#架构搭建" class="headerlink" title="架构搭建"></a>架构搭建</h3><p>本文只说验证码登录相关部分，默认大家Spring Cloud OAuth2这部分环境已经搭建好。<br><a href="https://www.cnblogs.com/fengzheng/p/11724625.html">Spring Cloud OAuth2 实现用户认证及单点登录</a></p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>OAuth 2 有四种授权模式，分别是授权码模式（authorization code）、简化模式（implicit）、密码模式（resource owner password credentials）、客户端模式（client credentials）。</p><p><a href="https://princeling66.github.io/MyBlog/2021/01/05/Spring%20Security%20%E5%92%8C%20OAuth2%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/">想了解简单的Spring Security 与 OAuth2的基本概念和应用场景的可以点这里</a></p><p>但是有时候我们需要一些自己特殊的模式登录，比如说验证码登录，第三方登录等等。上面几种模式并不是很方便，下面是将密码模式改造成手机验证码的方式来登录。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><h2 id="TokenEndpoint类中可以看到入口-oauth-token"><a href="#TokenEndpoint类中可以看到入口-oauth-token" class="headerlink" title="TokenEndpoint类中可以看到入口/oauth/token"></a>TokenEndpoint类中可以看到入口/oauth/token</h2><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106171948580.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>首先我们要知道/oauth/token是我们登录验证调用的接口，无论是get还是post都会走到post这个方法中。</p><p>其次我们需要打断点去看一下源码，了解两件事。</p><p>1、哪一步加入的四种授权模式。（因为四种授权模式是写死在源码里的，拓展的时候我们得自己加上）</p><p>2、密码模式是在哪里开始验证用户名密码。（为的是改造那部分来写自己的验证码模式）</p><h2 id="看源码阶段"><a href="#看源码阶段" class="headerlink" title="看源码阶段"></a>看源码阶段</h2><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106172230501.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OAuth2AccessToken token = getTokenGranter().grant(tokenRequest.getGrantType(), tokenRequest);</span><br></pre></td></tr></table></figure><p>这句代码就是我们要找的突破点</p><p>getTokenGranter()会调用tokenGranter()，tokenGranter的内容为：</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106172734520.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="getDefaultTokenGranters"><a href="#getDefaultTokenGranters" class="headerlink" title="getDefaultTokenGranters()"></a>getDefaultTokenGranters()</h3><p>就是这个方法，写死了那四种授权模式。红圈部分是在添加密码模式，之后我们就是要在这里添加我们的授权码模式<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106172843101.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="密码模式实现类ResourceOwnerPasswordTokenGranter"><a href="#密码模式实现类ResourceOwnerPasswordTokenGranter" class="headerlink" title="密码模式实现类ResourceOwnerPasswordTokenGranter"></a>密码模式实现类ResourceOwnerPasswordTokenGranter</h3><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106173031320.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>ResourceOwnerPasswordTokenGranter继承了AbstractTokenGranter类</p><p>而AbstractTokenGranter的实现类正好对应着四种授权模式，外加个刷新token的<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021010617325476.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>那么改造思路就很明确了</p><p>1、我们自己新增一个验证码模式类继承AbstractTokenGranter，</p><p>2、在源码调用getDefaultTokenGranters()方法的时候我们手动把这个类加进去不就行了</p><h2 id="编码阶段"><a href="#编码阶段" class="headerlink" title="编码阶段"></a>编码阶段</h2><h4 id="新建自定义验证码类SmsTokenGranter"><a href="#新建自定义验证码类SmsTokenGranter" class="headerlink" title="新建自定义验证码类SmsTokenGranter"></a>新建自定义验证码类SmsTokenGranter</h4><p>内容直接复制ResourceOwnerPasswordTokenGranter中的内容<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106173500359.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>password换成我们自定义的sms<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106173652851.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106173901371.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>重点在于checkPhoneSms(parameters);这是我们自定义的验证方法，对于验证码的验证就在这个方法中去做</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//在这个类中无法使用@autowire来从spring容器中取bean，因为不是他管理的，</span></span><br><span class="line"><span class="comment">//所以我们写了一个工具类(就是附录中的ApplicationContextAwareUtil)去取我们需要的bean</span></span><br><span class="line">   <span class="keyword">public</span> UserClientTransitService userClient = ApplicationContextAwareUtil.getBean(<span class="string">&quot;userClientTransitServiceImpl&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPhoneSms</span>(<span class="params">Map&lt;String, String&gt; parameters</span>)</span> &#123;</span><br><span class="line">       String phone = (String) parameters.<span class="keyword">get</span>(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">       String code = (String) parameters.<span class="keyword">get</span>(<span class="string">&quot;code&quot;</span>);<span class="comment">//验证码</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isBlank(phone)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InvalidGrantException(<span class="string">&quot;手机号不能为空&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isBlank(code)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InvalidGrantException(<span class="string">&quot;验证码不能为空&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        1、从缓存中根据手机号取出验证码校验不能为空</span></span><br><span class="line"><span class="comment">        2、验证通过后根据手机号查出用户名密码，设置到parameters中，这样本质就还是走密码模式</span></span><br><span class="line"><span class="comment">        （如果未创建的用户在这一步可以调用创建用户的方法，同时随机生成一个密码存着）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        特别注意：设置password时，根据自己的实际情况决定是否要使用PasswordEncoder，否则密码验证</span></span><br><span class="line"><span class="comment">        时会一直报错。不清楚PasswordEncoder是啥的同学，建议先阅读下面链接的环境搭建</span></span><br><span class="line"><span class="comment">           https://www.cnblogs.com/fengzheng/p/11724625.html</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       R&lt;UserInfo&gt; result = <span class="literal">null</span>;</span><br><span class="line">       result = userClient.userClientTransit(phone);</span><br><span class="line">       <span class="keyword">if</span> (result.isSuccess()) &#123;</span><br><span class="line">           UserInfo userInfo = result.getData();</span><br><span class="line">           User user = userInfo.getUser();</span><br><span class="line">           <span class="comment">//设置username和password，之所以设置手机号</span></span><br><span class="line">           <span class="comment">//是为了在loadUserByUsername方法中和原本走密码模式的username做一个区分</span></span><br><span class="line">           parameters.put(<span class="string">&quot;username&quot;</span>, user.getPhone());</span><br><span class="line">           parameters.put(<span class="string">&quot;password&quot;</span>, user.getPlaintextPassword());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我这里因为是微服务，user模块需要通过feign类远程调用，这边就新建了个userClientTransitServiceImpl去调用userClient,把它交给bean管理这边就能拿到了，<br>之前做接口的时候数据库存了明文密码，加上我这里使用了PasswordEncoder，所以user.getPlaintextPassword()拿的是明文密码，这块之后还是需要再优化一下。<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106175308601.jpg#pic_center" alt="PasswordEncoder"><br>PasswordEncoder.matches会把明文密码加密后和数据库中的密码对比。</p><p>loadUserByUsername方法中会根据username获取用户的权限信息组装起来，我这边因为有一个门户和一个后台的登陆，所以加了个手机登陆的类型，验证码的校验也在这里做了，也可以在上面checkPhoneSms()做<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106175624638.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>注意点：<br>原本的密码模式，是直接拿到我们输入的密码然后用passwordEncoder加密后再继续处理的，改成手机登录后我们拿到的就是一个加密的密码，所以它又会加密一次。所以在loadUserByUsername方法中，我们发现是其他模式登录时，把password也再加密一次。这样对比的密码就一致了。<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106180216691.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="在源码中加入我们自定义的验证码类"><a href="#在源码中加入我们自定义的验证码类" class="headerlink" title="在源码中加入我们自定义的验证码类"></a>在源码中加入我们自定义的验证码类</h3><p>方式有好几种，我就提供一种简单粗暴的，有想法的同学可以自己更改方式</p><p>我这里是从源码中把AuthorizationServerEndpointsConfigurer类复制出来，放在同名的包下，这样启动项目后就会优先走我们修改的代码<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106180407889.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>修改的东西很简单，把密码模式那句话复制一下，把new的类从ResourceOwnerPasswordTokenGrantercoin换成我们自定义的，SmsTokenGranter类即可,参数不用改变。<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106180525414.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="修改OAuth2-的认证中心配置文件"><a href="#修改OAuth2-的认证中心配置文件" class="headerlink" title="修改OAuth2 的认证中心配置文件"></a>修改OAuth2 的认证中心配置文件</h3><p>加上sms，这样在后面查找授权模式的时候才能找到,我的是在OAuth2配置文件是在数据库的，有不同的可AuthorizationServerConfiguration中增加配置<br><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106180657738.jpg#pic_center" alt="在这里插入图片描述"></p><h2 id="调用测试"><a href="#调用测试" class="headerlink" title="调用测试"></a>调用测试</h2><h4 id="输入一个错误的验证码"><a href="#输入一个错误的验证码" class="headerlink" title="输入一个错误的验证码"></a>输入一个错误的验证码</h4><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106182952734.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="输入一个正确的验证码"><a href="#输入一个正确的验证码" class="headerlink" title="输入一个正确的验证码"></a>输入一个正确的验证码</h4><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106183105948.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>最后就能验证成功了</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h4 id="ApplicationContextAwareUtil"><a href="#ApplicationContextAwareUtil" class="headerlink" title="ApplicationContextAwareUtil"></a>ApplicationContextAwareUtil</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存在一些情况无法直接Autowired注入我们需要的类，通过此工具类则可以直接获取spring中的bean</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 根据类名获取实例，例：</span></span><br><span class="line"><span class="comment"> * public StringRedisTemplate stringRedisTemplate = ApplicationContextAwareUtil.getBean(&quot;stringRedisTemplate&quot;);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Component</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApplicationContextAwareUtil</span> <span class="title">implements</span> <span class="title">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span>(<span class="params">ApplicationContext applicationContext</span>) throws BeansException</span> &#123;</span><br><span class="line">        ApplicationContextAwareUtil.applicationContext = applicationContext;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span>(<span class="params">String name</span>) throws BeansException</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (applicationContext == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/grimm/p/13518111.html">Spring Cloud OAuth2实现手机验证码登录</a><br><a href="https://www.cnblogs.com/xingxueliao/p/5911292.html">Spring Security OAuth2 开发指南（非最新版本）</a><br><a href="https://blog.csdn.net/silmeweed/article/details/101603227">Oauth2—AuthorizationServer配置</a><br><a href="https://www.cnblogs.com/fengzheng/p/11724625.html">Spring Cloud OAuth2 实现用户认证及单点登录</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Oauth2-0-实现短信验证码登录过程详解&quot;&gt;&lt;a href=&quot;#Oauth2-0-实现短信验证码登录过程详解&quot; class=&quot;headerlink&quot; title=&quot;Oauth2.0 实现短信验证码登录过程详解&quot;&gt;&lt;/a&gt;Oauth2.0 实现短信验证码登录过程</summary>
      
    
    
    
    <category term="登录" scheme="https://princeling66.github.io/MyBlog/categories/%E7%99%BB%E5%BD%95/"/>
    
    
    <category term="Spring Security" scheme="https://princeling66.github.io/MyBlog/tags/Spring-Security/"/>
    
    <category term="OAuth2" scheme="https://princeling66.github.io/MyBlog/tags/OAuth2/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security 和 OAuth2的简单介绍</title>
    <link href="https://princeling66.github.io/MyBlog/2021/01/05/Spring%20Security%20%E5%92%8C%20OAuth2%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>https://princeling66.github.io/MyBlog/2021/01/05/Spring%20Security%20%E5%92%8C%20OAuth2%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-01-05T10:00:16.000Z</published>
    <updated>2021-01-05T07:29:45.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security-和-OAuth2的简单介绍"><a href="#Spring-Security-和-OAuth2的简单介绍" class="headerlink" title="Spring Security 和 OAuth2的简单介绍"></a>Spring Security 和 OAuth2的简单介绍</h1><h2 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h2><p>Spring Security，这是一种基于 Spring AOP 和 Servlet 过滤器的安全框架。它提供全面的安全性解决方案，同时在 Web 请求级和方法调用级处理身份确认和授权。</p><p>它是一个专注于为Java应用程序提供认证和授权的框架。像所有的Spring项目一样，Spring Security的真正威力在于它可以很容易地扩展以满足客户的需求。</p><p>做web应用时，一般都需要用到安全框架，而现在web应用中，主要有两套安全框架，就是shiro 和 spring security。</p><p>功能上两者都差不多，shiro有的功能spring security都有，而且spring security还有一些额外的功能，就是对OAuth的支持。<img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210105114715321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>上图是网上的一些对比，如果是做单体项目，shiro足以，如果是分布式项目，推荐spring security 和 oauth2.0。</p><h2 id="OAuth2"><a href="#OAuth2" class="headerlink" title="OAuth2"></a>OAuth2</h2><p>OAuth 2.0是业界标准的授权协议。OAuth 2.0注重客户端开发者的简单性，同时为Web应用、桌面应用、手机和客厅设备提供特定的授权流程</p><p>比如微信有些小程序使用的时候需要微信的账号信息，如头像昵称等，这时候就是通过OAuth授权协议将微信的头像昵称信息共享给小程序，而不需要用到微信的账号和密码。<br>还有现在很多网站支持第三方登陆，如支持qq,微博，github等等，这种登陆方式也是基于OAuth2的，不必担心会造成密码泄漏。</p><p><a href="https://www.bilibili.com/video/av35979732?from=search&seid=6370600346221545740">彻底理解 OAuth2 协议</a><br>这个视频深入浅出，浅显易懂的讲述了OAuth2的基本概念，授权模式，应用场景，看完之后对OAuth 2会有一个简单的了解。</p><p><img src= "/MyBlog/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210105145216316.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5OTM0OA==,size_16,color_FFFFFF,t_70#pic_center"><br>这张图片是网上找来的，个人认为对OAuth2的流程画的很直观，网上其他关于OAuth2的详细解说有很多，感兴趣的可以去看看，这边就简单介绍一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Security-和-OAuth2的简单介绍&quot;&gt;&lt;a href=&quot;#Spring-Security-和-OAuth2的简单介绍&quot; class=&quot;headerlink&quot; title=&quot;Spring Security 和 OAuth2的简单介绍&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="授权" scheme="https://princeling66.github.io/MyBlog/categories/%E6%8E%88%E6%9D%83/"/>
    
    
    <category term="Spring Security" scheme="https://princeling66.github.io/MyBlog/tags/Spring-Security/"/>
    
    <category term="OAuth2" scheme="https://princeling66.github.io/MyBlog/tags/OAuth2/"/>
    
  </entry>
  
  <entry>
    <title>SQL 编写规范</title>
    <link href="https://princeling66.github.io/MyBlog/2020/12/29/SQL%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/"/>
    <id>https://princeling66.github.io/MyBlog/2020/12/29/SQL%20%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/</id>
    <published>2020-12-29T10:00:16.000Z</published>
    <updated>2020-12-29T09:13:33.779Z</updated>
    
    <content type="html"><![CDATA[<h4 id="SQL-编写规范"><a href="#SQL-编写规范" class="headerlink" title="SQL 编写规范"></a>SQL 编写规范</h4><h6 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h6><ol><li><p>UPDATE、DELETE 操作不使用 LIMIT，必须走 WHERE 精准匹配，LIMIT 是随机的，此类操作会导致数据出错。</p></li><li><p>禁止使用INSERT INTO t_xxx VALUES(xxx)，必须显式指定插入的列属性，避免表结构变动导致数据出错。</p></li><li><p>SQL 语句中最常见的导致索引失效的情况需注意：隐式类型转换，如索引 a 的类型是 varchar，SQL 语句写成 where a = 1; varchar 变成了int。</p></li><li><p>对索引列进行数学计算和函数等操作，例如，使用函数对日期列进行格式化处理。<br>join 列字符集不统一。</p></li><li><p>多列排序顺序不一致问题，如索引是 (a,b)，SQL 语句是 order by a b desclike。<br>模糊查询使用的时候对于字符型xxx%形式可以走到一些索引，其他情况都走不到索引。</p></li><li><p>使用了负方向查询（not，!=，not in 等）。==</p></li></ol><h6 id="建议事项"><a href="#建议事项" class="headerlink" title="建议事项"></a>建议事项</h6><ol><li>按需索取，拒绝select *，规避以下问题：无法索引覆盖，回表操作，增加 I/O。<br>额外的内存负担，大量冷数据灌入innodb_buffer_pool_size，降低查询命中率。<br>额外的网络传输开销。</li><li>尽量避免使用大事务，建议大事务拆小事务，规避主从延迟。<br>业务代码中事务及时提交，避免产生没必要的锁等待。</li><li>少用多表 join，大表禁止 join，两张表 join 必须让小表做驱动表，join 列必须字符集一致并且都建有索引。</li><li>LIMIT 分页优化，LIMIT 80000，10这种操作是取出80010条记录，再返回后10条，数据库压力很大，推荐先确认首记录的位置再分页，例如SELECT * FROM test WHERE id = ( SELECT sql_no_cache id FROM test order by id LIMIT 80000,1 ) LIMIT 10 ;。</li><li>避免多层子查询嵌套的 SQL 语句，MySQL 5.5 之前的查询优化器会把 in 改成 exists，会导致索引失效，若外表很大则性能会很差。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;SQL-编写规范&quot;&gt;&lt;a href=&quot;#SQL-编写规范&quot; class=&quot;headerlink&quot; title=&quot;SQL 编写规范&quot;&gt;&lt;/a&gt;SQL 编写规范&lt;/h4&gt;&lt;h6 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="数据库" scheme="https://princeling66.github.io/MyBlog/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Mysql" scheme="https://princeling66.github.io/MyBlog/tags/Mysql/"/>
    
    <category term="SQL" scheme="https://princeling66.github.io/MyBlog/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>JReble破解</title>
    <link href="https://princeling66.github.io/MyBlog/2020/12/16/JReble%E7%A0%B4%E8%A7%A3/"/>
    <id>https://princeling66.github.io/MyBlog/2020/12/16/JReble%E7%A0%B4%E8%A7%A3/</id>
    <published>2020-12-16T10:00:16.000Z</published>
    <updated>2020-12-17T06:52:16.561Z</updated>
    
    <content type="html"><![CDATA[<h4 id="生成-GUID-的网址"><a href="#生成-GUID-的网址" class="headerlink" title="生成 GUID 的网址"></a>生成 GUID 的网址</h4><p><a href="https://www.guidgen.com/">https://www.guidgen.com/</a></p><h4 id="用这个网址-生成的-GUID-激活"><a href="#用这个网址-生成的-GUID-激活" class="headerlink" title="用这个网址 + 生成的 GUID 激活"></a>用这个网址 + 生成的 GUID 激活</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;jrebel.qekang.com&#x2F;</span><br></pre></td></tr></table></figure><h4 id="如"><a href="#如" class="headerlink" title="如:"></a>如:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;jrebel.qekang.com&#x2F;2df0fa47-95ba-4dec-911b-4209a64b32d4</span><br></pre></td></tr></table></figure><h4 id="粘贴到Team-URL-第一个框中"><a href="#粘贴到Team-URL-第一个框中" class="headerlink" title="粘贴到Team URL 第一个框中"></a>粘贴到Team URL 第一个框中</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntelliJ IDEA --&gt;Preferences --&gt;JReble --&gt; Change License</span><br></pre></td></tr></table></figure><h4 id="设置离线模式-来防止失效"><a href="#设置离线模式-来防止失效" class="headerlink" title="设置离线模式 来防止失效"></a>设置离线模式 来防止失效</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntelliJ IDEA --&gt;Preferences --&gt;JReble --&gt; Work offline</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;生成-GUID-的网址&quot;&gt;&lt;a href=&quot;#生成-GUID-的网址&quot; class=&quot;headerlink&quot; title=&quot;生成 GUID 的网址&quot;&gt;&lt;/a&gt;生成 GUID 的网址&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://www.guidgen.com/&quot;</summary>
      
    
    
    
    <category term="工具" scheme="https://princeling66.github.io/MyBlog/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="JReble" scheme="https://princeling66.github.io/MyBlog/tags/JReble/"/>
    
    <category term="破解" scheme="https://princeling66.github.io/MyBlog/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
</feed>
